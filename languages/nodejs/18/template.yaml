AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app
Globals:
  Function:
    Architectures:
      - x86_64
    Timeout: 3
Parameters:
  AppBucketName:
    Type: String
    Description: "REQUIRED: Unique S3 bucket name to use for the app."

Resources:
  ##########################################################################
  #   Hello World Example - Image                                          #
  ##########################################################################
  HelloWorld1Function:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /18/hello-world-example/image
            Method: get
    Metadata:
      DockerTag: nodejs18.x-v1
      DockerContext: ./hello-world-example/image
      Dockerfile: Dockerfile

  HelloWorld1FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${HelloWorld1Function}"
      RetentionInDays: 30

  ##########################################################################
  #   Hello World Example - Zip                                            #
  ##########################################################################
  HelloWorld2Function:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello-world-example/zip/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /18/hello-world-example/zip
            Method: get

  HelloWorld2FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${HelloWorld2Function}"
      RetentionInDays: 30

  ##########################################################################
  #   Hello World Example - Typescript                                     #
  ##########################################################################
  HelloWorld3Function:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello-world-example/typescript/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /18/hello-world-example/typescript
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  HelloWorld3FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${HelloWorld3Function}"
      RetentionInDays: 30

  ##########################################################################
  #   Data processing - S3                                                 #
  ##########################################################################
  S3JsonLoggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: data-processing/src/handlers/s3-json-logger.s3JsonLoggerHandler
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 60
      Policies:
        S3ReadPolicy:
          BucketName: !Ref AppBucketName
      Events:
        S3NewObjectEvent:
          Type: S3
          Properties:
            Bucket: !Ref AppBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: ".json"

  S3JsonLoggerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${S3JsonLoggerFunction}"
      RetentionInDays: 30

  AppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref AppBucketName

  ##########################################################################
  #   Data processing - SNS                                                #
  ##########################################################################
  SNSPayloadLogger:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that logs the payload of messages sent to an associated SNS topic.
      Runtime: nodejs18.x
      Handler: data-processing/src/handlers/sns-payload-logger.snsPayloadLoggerHandler
      Events:
        SNSTopicEvent:
          Type: SNS
          Properties:
            Topic: !Ref SimpleTopic
      MemorySize: 128
      Timeout: 100
      Policies:
        - AWSLambdaBasicExecutionRole

  SNSPayloadLoggerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SNSPayloadLogger}"
      RetentionInDays: 30

  SimpleTopic:
    Type: AWS::SNS::Topic

  ##########################################################################
  #   Data processing - SQS                                                #
  ##########################################################################
  SQSPayloadLogger:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that logs the payload of messages sent to an associated SQS queue.
      Runtime: nodejs18.x
      Handler: data-processing/src/handlers/sqs-payload-logger.sqsPayloadLoggerHandler
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SimpleQueue.Arn
      MemorySize: 128
      Timeout: 25
      Policies:
        - AWSLambdaBasicExecutionRole

  SQSPayloadLoggerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${SQSPayloadLogger}"
      RetentionInDays: 30

  SimpleQueue:
    Type: AWS::SQS::Queue

  ##########################################################################
  #   Hello World Example with Powertools for AWS Lambda                   #
  ##########################################################################
  HelloWorld4Function:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: hello-world-with-powertools-for-aws-lambda/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Tracing: Active
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: helloWorld
          POWERTOOLS_METRICS_NAMESPACE: sam-app
          LOG_LEVEL: INFO
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /18/hello-world-with-powertools-for-aws-lambda
            Method: get
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints:
          - app.ts

  HelloWorld4FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${HelloWorld4Function}"
      RetentionInDays: 30

  ##########################################################################
  #   Multi-step workflow                                                  #
  ##########################################################################
  StockTradingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: multi-step-workflow/statemachine/stock_trader.asl.json
      DefinitionSubstitutions:
        StockCheckerFunctionArn: !GetAtt StockCheckerFunction.Arn
        StockSellerFunctionArn: !GetAtt StockSellerFunction.Arn
        StockBuyerFunctionArn: !GetAtt StockBuyerFunction.Arn
        DDBPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DDBTable: !Ref TransactionTable
      Events:
        HourlyTradingSchedule:
          Type: Schedule # More info about Schedule Event Source: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-statemachine-schedule.html
          Properties:
            Description: Schedule to run the stock trading state machine every hour
            Enabled: False # This schedule is disabled by default to avoid incurring charges.
            Schedule: "rate(1 hour)"
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref StockCheckerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StockSellerFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref StockBuyerFunction
        - DynamoDBWritePolicy:
            TableName: !Ref TransactionTable

  StockCheckerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: multi-step-workflow/functions/stock-checker/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x

  StockCheckerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StockCheckerFunction}"
      RetentionInDays: 30

  StockSellerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: multi-step-workflow/functions/stock-seller/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x

  StockSellerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StockSellerFunction}"
      RetentionInDays: 30

  StockBuyerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: multi-step-workflow/functions/stock-buyer/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x

  StockBuyerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StockBuyerFunction}"
      RetentionInDays: 30

  TransactionTable:
    Type: AWS::Serverless::SimpleTable # More info about SimpleTable Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-simpletable.html
    Properties:
      PrimaryKey:
        Name: Id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  ##########################################################################
  #   Scheduled task                                                       #
  ##########################################################################
  ScheduledEventLogger:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that logs the payload of messages sent to an associated SQS queue.
      Runtime: nodejs18.x
      Handler: scheduled-task/src/handlers/scheduled-event-logger.scheduledEventLoggerHandler
      # This property associates this Lambda function with a scheduled CloudWatch Event. For all available properties, see
      # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#schedule
      # This example runs every hour.
      Events:
        CloudWatchEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 * * * ? *)
      MemorySize: 128
      Timeout: 100

  ScheduledEventLoggerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ScheduledEventLogger}"
      RetentionInDays: 30

  ##########################################################################
  #   Standalone function                                                  #
  ##########################################################################
  helloFromLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: standalone-function/src/handlers/hello-from-lambda.helloFromLambdaHandler
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 100
      Description: A Lambda function that returns a static string.
      Policies:
        - AWSLambdaBasicExecutionRole

  helloFromLambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${helloFromLambdaFunction}"
      RetentionInDays: 30

  ##########################################################################
  #   Serverless API                                                       #
  ##########################################################################
  getAllItems1Function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: serverless-api/src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Sample1Table
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref Sample1Table
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET

  getAllItems1FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${getAllItems1Function}"
      RetentionInDays: 30

  getById1Function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: serverless-api/src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Sample1Table
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref Sample1Table
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET

  getById1FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${getById1Function}"
      RetentionInDays: 30

  putItem1Function:
    Type: AWS::Serverless::Function
    Properties:
      Handler: serverless-api/src/handlers/put-item.putItemHandler
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Sample1Table
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref Sample1Table
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST

  putItem1FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${putItem1Function}"
      RetentionInDays: 30

  Sample1Table:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  ##########################################################################
  #   Lambda Response Streaming                                            #
  ##########################################################################
  StreamingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda-response-streaming/src/
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 10
      FunctionUrlConfig:
        AuthType: AWS_IAM
        InvokeMode: RESPONSE_STREAM

  StreamingFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${StreamingFunction}"
      RetentionInDays: 30

  ##########################################################################
  #   Full Stack                                                           #
  ##########################################################################
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'OPTIONS, POST, GET'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'" #DO NOT USE THIS VALUE IN PRODUCTION - https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html

  # This is a Lambda function config associated with the source code: get-by-id.js
  getAllItems2Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: full-stack/backend/
      Handler: full-stack/src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items by id from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Sample2Table
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref Sample2Table
          ENDPOINT_OVERRIDE: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi

  getAllItems2FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${getAllItems2Function}"
      RetentionInDays: 30

  getById2Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: full-stack/backend/
      Handler: full-stack/src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Sample2Table
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref Sample2Table
          ENDPOINT_OVERRIDE: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi

  getById2FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${getById2Function}"
      RetentionInDays: 30

  putItem2Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: full-stack/backend/
      Handler: full-stack/src/handlers/put-item.putItemHandler
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Sample2Table
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref Sample2Table
          ENDPOINT_OVERRIDE: ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId:
              Ref: ApiGatewayApi

  putItem2FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${putItem2Function}"
      RetentionInDays: 30

  Sample2Table:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

  WebSiteBucket:
    Type: "AWS::S3::Bucket"
  WebSiteBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref WebSiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: "PolicyForCloudFrontPrivateContent"
        Statement:
          - Sid: "AllowCloudFrontServicePrincipal"
            Effect: "Allow"
            Principal:
              Service: "cloudfront.amazonaws.com"
            Action: "s3:GetObject"
            Resource: !Join [ "", [ "arn:aws:s3:::", !Ref WebSiteBucket, "/*" ] ]
            Condition:
              StringEquals:
                "AWS:SourceArn": !Join [ "", [ "arn:aws:cloudfront::", !Ref "AWS::AccountId", ":distribution/", !Ref CloudFrontDistribution ] ]

  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebSiteBucket.RegionalDomainName
            Id: "myS3Origin"
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ""
        Enabled: true
        DefaultRootObject: "index.html"
        HttpVersion: "http2"
        DefaultCacheBehavior:
          AllowedMethods:
            - "DELETE"
            - "GET"
            - "HEAD"
            - "OPTIONS"
            - "PATCH"
            - "POST"
            - "PUT"
          CachedMethods:
            - "GET"
            - "HEAD"
          TargetOriginId: "myS3Origin"
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: "none"
          ViewerProtocolPolicy: "allow-all"
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        PriceClass: "PriceClass_200"
        Restrictions:
          GeoRestriction:
            RestrictionType: "whitelist"
            Locations:
              - "US"
              - "CA"
              - "GB"
              - "DE"
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
  CloudFrontOriginAccessControl:
    Type: "AWS::CloudFront::OriginAccessControl"
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${WebSiteBucket} OAC"
        OriginAccessControlOriginType: "s3"
        SigningBehavior: "always"
        SigningProtocol: "sigv4"